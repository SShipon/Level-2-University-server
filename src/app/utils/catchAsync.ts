
// higher order function 01 

import { NextFunction, Request, RequestHandler, Response } from "express";
const catchAsync = (fn:RequestHandler) => {
    return(req:Request, res:Response, next:NextFunction)=>{
      Promise.resolve(fn(req, res, next)).catch(err =>next(err))
    };
   };
   export default catchAsync;


// // higher order function 02 
// export const asyncHandler = (fn: RequestHandler) => 
//   (req: Request, res: Response, next: NextFunction) => {
//     Promise.resolve(fn(req, res, next)).catch(next);
// };



// আপনি যদি এই দুটি ফাংশনকে ব্যবহার করতে চান, তবে আপনার Express অ্যাপ্লিকেশনের বিভিন্ন রুট হ্যান্ডলারের জন্য এই ফাংশনগুলির ব্যবহার করতে পারেন।

// এই দুটি ফাংশনের  মুল উদ্দেশ্য হল এরর হ্যান্ডলিং করা। এই দুটির মধ্যে প্রধান পার্থক্য হল কী কাজ করে প্রত্যেকটি ফাংশন।

// 1. catchAsync ফাংশনটি একটি উচ্চতর ক্রমের ফাংশন (higher-order function) যা একটি মূল ফাংশন নেয় এবং এর মধ্যে নির্দিষ্ট কাজ করে। এটি একটি অ্যাসিংক্রোনাস ফাংশনের এরর হ্যান্ডল করার জন্য ব্যবহৃত হয়েছে। যখন ফাংশনটি কল করা হয়, তখন এই ফাংশনটি মিডলওয়ের ফাংশন হিসাবে কাজ করে এবং ফাংশনটি অপ্রত্যাশিত ত্রুটি হ্যান্ডল করে নেক্স্ট ফাংশনে পাঠায়। এই ফাংশনটি নিজেই কোনো ফাংশন রিটার্ন করে না।

// 2.asyncHandler ফাংশনটি একটি অ্যাসিংক্রোনাস ফাংশনকে হ্যান্ডল করে এবং এই মিডলওয়ের ফাংশনের কাজ করার জন্য তৈরি করা হয়েছে। এটি একটি নতুন ফাংশন তৈরি করে এবং তা রিটার্ন করে না, তবে তা আবার এই ফাংশনের মধ্যে থাকে। এটি কোনো অ্যাসিংক্রোনাস ফাংশন নিয়ে কাজ করে এবং সে ফাংশনটির কাজ শেষ হওয়ার পর এই মিডলওয়ের ফাংশনের কাছে নেয়। যেহেতু এই ফাংশনটি একটি উচ্চতর ক্রমের ফাংশন, তাই আমরা এটি আসলে কোনো ফাংশন রিটার্ন করি না, তবে আমরা তাকে পুনরাবৃত্তি করি এবং তার মাধ্যমে কাজ করার অনুমতি দিই।
// এই দুটি ফাংশনের উদ্দেশ্য একই রকম, কিন্তু তারা একে অপরের সাথে সম্পৃক্ত না। এই দুটি ফাংশন একটি Express অ্যাপ্লিকেশনে অ্যাসিংক্রোনাস ফাংশনের এরর হ্যান্ডল করার জন্য ব্যবহৃত হয়েছে এবং তাদের ব্যবহার। 